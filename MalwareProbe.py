import tkinter as tk
from tkinter import ttk, filedialog, messagebox
import webbrowser
import os
import zipfile
import hashlib
import datetime
import requests
import time

class IntroScreen:
    def __init__(self, root, on_tool_open, on_website_open):
        self.root = root
        self.on_tool_open = on_tool_open
        self.on_website_open = on_website_open

        self.intro_frame = tk.Frame(self.root, bg="#003153")
        self.intro_frame.pack(fill=tk.BOTH, expand=True)

        self.root.geometry("900x800")

        # Title Label
        self.title_label = ttk.Label(self.intro_frame, text="MALWARE PROBE", font=("Times New Roman", 22, "bold"), background="#003153", foreground="#ffffff")
        self.title_label.place(relx=0.5, rely=0.15, anchor=tk.CENTER)

        # Introduction text
        intro_text = (
            "In the ever-evolving world of cybersecurity, understanding and mitigating malware threats "
            "is essential. Malware Probe is a simple yet effective malware analysis tool developed in Python, "
            "designed to help you get started with malware analysis without the complexity of advanced tools."
        )

        self.intro_label = ttk.Label(
            self.intro_frame, text=intro_text, wraplength=800, justify=tk.LEFT,font=("Times New Roman", 20), background="#003153", foreground="#ffffff"
        )
        self.intro_label.place(relx=0.5, rely=0.3, anchor=tk.CENTER)


        self.open_tool_button = ttk.Button(self.intro_frame, text="Open Malware Analysis Tool", command=self.open_tool)
        self.open_tool_button.place(relx=0.5, rely=0.6, anchor=tk.CENTER)

        self.visit_website_button = ttk.Button(self.intro_frame, text="Visit Website", command=self.visit_website)
        self.visit_website_button.place(relx=0.5, rely=0.65, anchor=tk.CENTER)

        # Timer for automatic transition (comment out if not needed)
        self.root.after(5000, self.check_transition)

    def open_tool(self):
        self.on_tool_open()
        self.close_intro()

    def visit_website(self):
        self.on_website_open()
        self.close_intro() 

    def close_intro(self):
        self.intro_frame.destroy()

        # Unhide the root window
        self.root.deiconify()

    def check_transition(self):
        # Check if any action has been taken, if not, do nothing (or close intro)
        pass


class MalwareAnalysisApp:
    def __init__(self, root, api_key):
        self.root = root
        self.root.title("Malware Analysis Results")
        self.root.geometry("900x800")
        self.style = ttk.Style(self.root)
        self.style.theme_use("clam")
        self.api_key = api_key
        self.create_widgets()

    def create_widgets(self):
        # Title Frame
        self.title_frame = tk.Frame(self.root, bg="#000000")
        self.title_frame.pack(fill=tk.X, pady=5)

        # Title Label
        self.title_label = ttk.Label(self.title_frame, text="Malware Analysis Tool", font=("Times New Roman", 22), background="#000000", foreground="#ffffff")
        self.title_label.pack(pady=10)

        # File Selection
        self.label = ttk.Label(self.root, text="Select a file or folder for malware analysis:", font=("Times New Roman", 14))
        self.label.pack(pady=(20, 10))

        self.file_button = ttk.Button(self.root, text="Browse", command=self.browse_file)
        self.file_button.pack(pady=10)

        # Results Frame
        self.results_frame = ttk.Frame(self.root)
        self.results_frame.pack(pady=10, padx=10, fill='both', expand=True)

        # Set background color using style
        self.results_frame.configure(style="Background.TFrame")

        # File Info
        self.file_info_label = ttk.Label(self.results_frame, text="File Information:", font=("Times New Roman", 18))
        self.file_info_label.pack(pady=(10, 0), anchor="w")
        self.file_info_text = tk.Text(self.results_frame, height=6, width=70, bg="white", font=("Arial", 10))
        self.file_info_text.pack(pady=(0, 10), padx=(0, 10), fill='both', expand=True)

        # Scan Results
        self.scan_label = ttk.Label(self.results_frame, text="Scan Results:", font=("Times New Roman", 18))
        self.scan_label.pack(pady=(10, 0), anchor="w")

        self.scan_text = tk.Text(self.results_frame, height=10, width=70, bg="white", font=("Arial", 10))
        self.scan_text.pack(pady=(0, 10), padx=(0, 10), fill='both', expand=True)

        # Safety Label
        self.safety_label = ttk.Label(self.results_frame, text="Safety Status:", font=("Times New Roman", 18))
        self.safety_label.pack(pady=(10, 0), anchor="w")

        self.safety_status = ttk.Label(self.results_frame, text="", font=("Impact", 15))
        self.safety_status.pack(pady=(0, 10), padx=(0, 10), anchor="w")

        # Close button
        self.close_button = ttk.Button(self.root, text="Close", command=self.root.quit)
        self.close_button.pack(pady=10)

        # Define style for background color
        self.style.configure("Background.TFrame", background="#f0f0f0")

        # Website Link
        self.website_link = tk.Label(self.root, text="Worried about malware and want to stay safe? Click here to learn more! ", font=("Times New Roman", 14), fg="blue", cursor="hand2")
        self.website_link.pack(pady=(10,20), anchor="center")
        self.website_link.bind("<Button-1>", lambda e: self.open_website("https://www.staysafeonline.in/topics"))

    def browse_file(self):
        file_path = filedialog.askopenfilename()
        if file_path:
            self.perform_analysis(file_path)

    def perform_analysis(self, file_path):
        try:
            if os.path.isfile(file_path):
                with open(file_path, 'rb') as f:
                    file_data = f.read()
                self.analyze_file(file_path, file_data)
            elif os.path.isdir(file_path):
                self.analyze_directory(file_path)
            elif zipfile.is_zipfile(file_path):
                with zipfile.ZipFile(file_path, 'r') as zip_ref:
                    for member in zip_ref.namelist():
                        member_data = zip_ref.read(member)
                        self.analyze_file(member, member_data)
            else:
                messagebox.showerror("Error", "Unsupported file type")
        except Exception as e:
            messagebox.showerror("Error", f"Failed to analyze the file: {e}")

    def analyze_file(self, file_path, file_data):
        file_size = f"{len(file_data) / 1024:.2f} KB"
        md5_hash = hashlib.md5(file_data).hexdigest()
        sha256_hash = hashlib.sha256(file_data).hexdigest()
        file_type = file_path.split('.')[-1].upper() if '.' in file_path else 'Unknown'
        creation_date = datetime.datetime.fromtimestamp(os.path.getctime(file_path)).strftime('%Y-%m-%d %H:%M:%S')
        modification_date = datetime.datetime.fromtimestamp(os.path.getmtime(file_path)).strftime('%Y-%m-%d %H:%M:%S')
        access_date = datetime.datetime.fromtimestamp(os.path.getatime(file_path)).strftime('%Y-%m-%d %H:%M:%S')
        file_permissions = oct(os.stat(file_path).st_mode)[-3:]

        # Send file to VirusTotal for analysis
        try:
            results = self.virustotal_analysis(file_data)

            file_info = f"File Name: {file_path}\n" \
                        f"File Type: {file_type}\n" \
                        f"Creation Date: {creation_date}\n" \
                        f"File Size: {file_size}\n" \
                        f"MD5: {md5_hash}\n" \
                        f"SHA-256: {sha256_hash}\n" \
                        f"Access Date: {access_date}\n" \
                        f"File Permissions: {file_permissions}"
            self.file_info_text.delete("1.0", tk.END)
            self.file_info_text.insert(tk.END, file_info)

            scan_results = ""
            if 'scans' in results:
                for engine, result in results['scans'].items():
                    if result['result']:
                        scan_results += f"{engine}: {result['result']}\n"
                    else:
                        scan_results += f"{engine}: Undetected\n"

                # Determine safety status
                if all(result['result'] in ['clean', 'Undetected'] for result in results['scans'].values() if result['result']):
                    self.safety_status.config(text="Safe", foreground="green")
                else:
                    self.safety_status.config(text="Not Safe", foreground="red")
            else:
                scan_results = "Undetected"
                self.safety_status.config(text="Safe", foreground="green")
            self.scan_text.delete("1.0", tk.END)
            self.scan_text.insert(tk.END, scan_results)

        except Exception as e:
            messagebox.showerror("Error", f"Failed to fetch VirusTotal analysis results: {e}")

    def analyze_directory(self, dir_path):
        for root, dirs, files in os.walk(dir_path):
            for file in files:
                file_path = os.path.join(root, file)
                with open(file_path, 'rb') as f:
                    file_data = f.read()
                self.analyze_file(file_path, file_data)

    def virustotal_analysis(self, file_data):
        url = 'https://www.virustotal.com/vtapi/v2/file/scan'
        files = {'file': file_data}
        params = {'apikey': self.api_key}

        response = requests.post(url, files=files, params=params)

        if response.status_code == 200:
            resource = response.json().get('resource')
            if resource:
                # Polling for the report
                url = f'https://www.virustotal.com/vtapi/v2/file/report'
                params = {'apikey': self.api_key, 'resource': resource}
                for _ in range(5):  # Retry up to 5 times
                    response = requests.get(url, params=params)
                    if response.status_code == 200 and response.json().get('response_code') == 1:
                        return response.json()
                    time.sleep(8)  # Wait 8 seconds before retrying

                raise Exception("Error fetching analysis results from VirusTotal")

            else:
                raise Exception("Error submitting file to VirusTotal")
        else:
            raise Exception("Error submitting file to VirusTotal")

    def open_website(self, url):
        webbrowser.open_new(url)

def main():
    root = tk.Tk()
    api_key = "YOUR_VIRUSTOTAL_API_KEY"

    def open_tool():
        intro_screen.close_intro()
        MalwareAnalysisApp(root, api_key)

    intro_screen = IntroScreen(root, open_tool, lambda: MalwareAnalysisApp(root, api_key).open_website("https://www.staysafeonline.in/topics"))

    root.mainloop()

if __name__ == "__main__":
    main()


